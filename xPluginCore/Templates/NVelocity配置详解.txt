在VelocityEngine初始化前，可以通过ExtendedProperties配置CNVelocity的运行环境参数，当执行VelocityEngine的Init(ExtendedProperties)后，CNVelocity会合并自定义配置和默认配置。CNVelocity在CNVelocity.Runtime.RuntimeConstants中定义了默认配置项的名称，在内嵌资源文件CNVelocity.Runtime.Defaults.CNVelocity.properties中定义了所有默认配置项的值。下面列出一些常用配置：

模板编码：

input.encoding=ISO-8859-1     //模板输入编码
output.encoding=ISO-8859-1  //模板输出编码

#foreach配置

directive.foreach.counter.name = velocityCount     //计数器名称
directive.foreach.counter.initial.value = 1               //计数器初始值
directive.foreach.maxloops = -1                           //最大循环次数，-1为默认不限制 directive.foreach.iterator.name = velocityHasNex    //迭代器名称

#set配置

directive.set.null.allowed = false     //是否可设置空值

#include配置

directive.include.output.errormsg.start = <!-- include error :     //错误信息提示开始字符串
directive.include.output.errormsg.end   =  see error log -->      //错误信息提示结束字符串

#parse配置

directive.parse.max.depth = 10     //解析深度

模板加载器配置

 

resource.loader = file     //模板加载器类型，默认为文件，可定义多个

file.resource.loader.description = Velocity File Resource Loader     //加载器描述
file.resource.loader.class = CNVelocity.Runtime.Resource.Loader.FileResourceLoader     //加载器类名称
file.resource.loader.path = .            //模板路径
file.resource.loader.cache = false     //是否启用模板缓存
file.resource.loader.modificationCheckInterval = 2     //检查模板更改时间间隔

宏配置

velocimacro.permissions.allow.inline = true                              //是否可以行内定义
velocimacro.permissions.allow.inline.to.replace.global = false     //是否可以用行内定义代替全局定义
velocimacro.permissions.allow.inline.local.scope = false             //行内定义是否只用于局部

velocimacro.context.localscope = false                                    //宏上下文是否只用于局部
velocimacro.max.depth = 20                                                  //解析深度

velocimacro.arguments.strict = false                                       //宏参数是否启用严格模式

资源管理器配置

resource.manager.class = CNVelocity.Runtime.Resource.ResourceManagerImpl          //管理器类名称
resource.manager.cache.class = CNVelocity.Runtime.Resource.ResourceCacheImpl     //缓存器类名称

解析器池配置

parser.pool.class = CNVelocity.Runtime.ParserPoolImpl     //解析池类名称
parser.pool.size = 40                                                  //初始大小

#evaluate配置

directive.evaluate.context.class = CNVelocity.VelocityContext     //上下问类名称

可插入introspector配置

runtime.introspector.uberspect = CNVelocity.Util.Introspection.UberspectImpl     //默认introspector类名称




　很多人下载了EasyJWeb的开源应用示例，但是对动态页面模板文件中的标签使用不是很熟悉，这里简单介绍一下。EasyJWeb特定把视图限定为Velocity，因为我们觉得在Velocity在表现上从可维护性、简洁性乃灵活性上，比JSP及其它视力技术表现强得多。虽然我们可以非常简单把EasyJWeb扩展成支持多种视力技术，但当前我们不打算这样做！
　　使用EasyJWeb的目的，是在于把页面－程序完成分开，就也就是一个项目中，程序员使用专业Java开发工具（如Eclipse、JBuilder等)来编写、调试、测试程序，页面制作人员使用专业的网页制作工具（如Macromedia Dreamweaver）来设计制作网页，而两者之间的协调通过一个规范的接口协议来解决。需要在页面里面加如一些标签，来生成动态内容，这一工作可以交由网页制作人员来完成。因为使用Velocity作为视图，由于他的语法、功能及使用方法都比较简单，因此一般情况下，一天以内就能让页面制作人员熟练掌握其用法。
　　Velocity是一个基于java的模板引擎（template engine），它允许任何人仅仅简单的使用模板语言（template language）来引用由java代码定义的对象。作为一个比较完善的模板引擎，Velocity的功能是比较强大的，但强大的同时也增加了应用复杂性。
 
一、基本语法
1、"#"用来标识Velocity的脚本语句，包括#set、#if 、#else、#end、#foreach、#end、#iinclude、#parse、#macro等；
如:
#if($info.imgs)
<img src="$info.imgs" border=0>
#else
<img src="noPhoto.jpg">
#end

2、"$"用来标识一个对象(或理解为变量)；如
如：$i、$msg、$TagUtil.options(...)等。

3、"{}"用来明确标识Velocity变量；
比如在页面中，页面中有一个$someonename，此时，Velocity将把someonename作为变量名，若我们程序是想在someone这个变量的后面紧接着显示name字符，则上面的标签应该改成${someone}name。

4、"!"用来强制把不存在的变量显示为空白。
如当页面中包含$msg，如果msg对象有值，将显示msg的值，如果不存在msg对象同，则在页面中将显示$msg字符。这是我们不希望的，为了把不存在的变量或变量值为null的对象显示为空白，则只需要在变量名前加一个“!”号即可。
如：$!msg
 
 
二、在EasyJWeb中的最佳实践
  　　理论上你可以在EasyjWeb模板使用所有Velocity的脚本及功能，但我们不推荐你在界面模板中使用过多过复杂的脚本表达方式，在万不得已的情况下，不要在界面模板中加入任何复杂的逻辑，更不要在界面模板中加入变量声明、逻辑运算符等等。
　　在EasyJWeb中，我们提供了五条基本的模板脚本语句，基本上就能满足所有应用模板的要求。这四条模板语句很简单，可以直接由界面设计人员来添加。在当前很多EasyJWeb的应用实践中，我们看到，所有界面模板中归纳起来只有下面四种简单模板脚本语句即可实现：
　　 1、$!obj 　直接返回对象结果。
　　 如：在html标签中显示java对象msg的值。<p>$!msg</p>
　 在html标签中显示经过HtmlUtil对象处理过后的msg对象的值　　<p>$!HtmlUtil.doSomething($!msg)</p>
　　2、#if($!obj) #else #end 判断语句
　　 如：在EasyJWeb各种开源应用中，我们经常看到的用于弹出提示信息msg的例子。
　　 #if($msg)
　　 <script>
　　 alert('$!msg');
　　 </script>
　　 #end
上面的脚本表示当对象msg对象存在时，输出<script>等后面的内容。
　　3、#foreach( $info in $list) $info.someList #end　　循环读取集合list中的对象，并作相应的处理。
　　 如：EasyJF开源论坛系统中论(0.3)坛首页显示热门主题的html界面模板脚本：
　　#foreach( $info in $hotList1) 
<a href="/bbsdoc.ejf?easyJWebCommand=show&&cid=$!info.cid" target="_blank">$!info.title</a><br>
　　　 #end 
　　 上面的脚本表示循环遍历hotList1集合中的对象，并输出对象的相关内容。
　　 
　　 4、#macro(macroName)#end 脚本函数(宏)调用，不推荐在界面模板中大量使用。
　　 如：在使用EasyJWeb Tools快速生成的添删改查示例中，可以点击列表的标题栏进行升降排序显示，这是我们在EasyJWeb应用中经常看到的一个排序状态显示的模板内容。
　　 函数(宏)定义，一般放在最前面
　　 #macro(orderPic $type)
　　 #if ($orderField.equals($type)) 
　　 <img src="http://images.cnblogs.com/ico/${orderType}.gif"> 
　　 #end
　　 #end
具体的调用如：<font color="#FFFFFF">头衔#orderPic("title")</font>
　　5、包含文件#inclue("模板文件名")或#parse("模板文件名")
　　主要用于处理具有相同内容的页面，比如每个网站的顶部或尾部内容。
　　使用方法，可以参考EasyJF开源Blog及EasyJF开源论坛中的应用！
　　如：#parse("/blog/top.html")或#include("/blog/top.html")
　　parse与include的区别在于，若包含的文件中有Velocity脚本标签，将会进一步解析，而include将原样显示。
 
 
三、关于#set的使用
　　在万不得已的时候，不要在页面视图自己声明Velocity脚本变量，也就是尽量少使用#set。有时候我们需要在页面中显示序号，而程序对象中又没有包含这个序号属性同，可以自己定义。如在一个循环体系中，如下所示：
　　#set ($i=0)
　　#foreach($info in $list)
　　序号:$i
　　#set($i=$i+1)
　　#end
　
 
 
四、Velocity脚本语法摘要
1、声明:#set ($var=XXX)
　　左边可以是以下的内容
　　Variable reference 
　　String literal 
　　Property reference 
　　Method reference 
　　Number literal #set ($i=1) 
　　ArrayList #set ($arr=["yt1","t2"])
　　算术运算符

2、注释:
　　单行## XXX
　　多行#* xxx
　　xxxx
　　xxxxxxxxxxxx*#

　　References 引用的类型
3、变量 Variables 
　　以 "$" 开头，第一个字符必须为字母。character followed by a VTL Identifier. (a .. z or A .. Z).
　　变量可以包含的字符有以下内容：
　　alphabetic (a .. z, A .. Z) 
　　numeric (0 .. 9) 
　　hyphen ("-") 
　　underscore ("_") 

4、Properties 
　　$Identifier.Identifier
　　$user.name
　　hashtable user中的的name值.类似：user.get("name")

5、Methods 
　　object user.getName() = $user.getName()

6、Formal Reference Notation 
　　用{}把变量名跟字符串分开 

　　如
　　#set ($user="csy"}
　　${user}name 
　　返回csyname

　　$username
　　$!username
　　$与$!的区别
　　当找不到username的时候，$username返回字符串"$username"，而$!username返回空字符串"" 

7、双引号 与 引号 
　　#set ($var="helo")
　　test"$var" 返回testhello
　　test'$var' 返回test'$var'
　　可以通过设置 stringliterals.interpolate=false改变默认处理方式

8、条件语句
　　#if( $foo ) 
　　 <strong>Velocity!</strong>
　　#end
　　#if($foo)
　　#elseif()
　　#else
　　#end
　　当$foo为null或为Boolean对象的false值执行.

9、逻辑运算符:== && || !

10、循环语句#foreach($var in $arrays ) // 集合包含下面三种Vector, a Hashtable or an Array
#end
　　#foreach( $product in $allProducts )
　　 <li>$product</li>
　　#end

　　#foreach( $key in $allProducts.keySet() )
　　 <li>Key: $key -> Value: $allProducts.get($key)</li>
　　#end

　　#foreach( $customer in $customerList )
　　 <tr><td>$velocityCount</td><td>$customer.Name</td></tr>
　　#end

11、velocityCount变量在配置文件中定义
　　# Default name of the loop counter
　　# variable reference.
　　directive.foreach.counter.name = velocityCount
　　# Default starting value of the loop
　　# counter variable reference.
　　directive.foreach.counter.initial.value = 1

12、包含文件 
　　#include( "one.gif","two.txt","three.htm" )

13、Parse导入脚本
　　#parse("me.vm" )

14、#stop 停止执行并返回 

15、定义宏Velocimacros ,相当于函数 支持包含功能
　　#macro( d )
　　 <tr><td></td></tr>
　　#end
　　调用 
　　#d()

16、带参数的宏
　　#macro( tablerows $color $somelist )
　　#foreach( $something in $somelist )
　　 <tr><td bgcolor=$color>$something</td></tr>
　　#end
　　#end

17、Range Operator 
　　#foreach( $foo in [1..5] )